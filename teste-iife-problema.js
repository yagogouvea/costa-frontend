// Teste para identificar se a IIFE era o problema das p√°ginas em branco
console.log('üîç TESTE: IDENTIFICANDO PROBLEMA DA IIFE\n');

// Simular dados com 8 fotos (como na imagem)
const dados = {
  checklist: { veiculo_recuperado: 'Sim' },
  descricao: 'Descri√ß√£o da ocorr√™ncia',
  fotos: Array.from({ length: 8 }, (_, i) => ({ url: `foto${i + 1}.jpg` }))
};

console.log('üìä DADOS DE TESTE:');
console.log(`   ‚Ä¢ Checklist: ${dados.checklist ? 'Sim' : 'N√£o'}`);
console.log(`   ‚Ä¢ Descri√ß√£o: ${dados.descricao ? 'Sim' : 'N√£o'}`);
console.log(`   ‚Ä¢ Total de fotos: ${dados.fotos.length}`);

// Simular a l√≥gica atual (sem IIFE)
function simularSemIIFE() {
  console.log('\nüìÑ SIMULA√á√ÉO SEM IIFE:');
  
  const fotosPorPagina = 4;
  const totalPaginasConteudo = (dados.checklist || dados.descricao) ? 2 : 1;
  const primeiraPaginaFotos = totalPaginasConteudo + 1;
  const totalPaginasFotos = Math.ceil(dados.fotos.length / fotosPorPagina);
  
  console.log(`   ‚Ä¢ P√°ginas de conte√∫do: ${totalPaginasConteudo}`);
  console.log(`   ‚Ä¢ Primeira p√°gina de fotos: ${primeiraPaginaFotos}`);
  console.log(`   ‚Ä¢ Total de p√°ginas de fotos: ${totalPaginasFotos}`);
  
  const paginas = [];
  
  for (let paginaIndex = 0; paginaIndex < totalPaginasFotos; paginaIndex++) {
    const inicioFotos = paginaIndex * fotosPorPagina;
    const fotosDaPagina = dados.fotos.slice(inicioFotos, inicioFotos + fotosPorPagina);
    
    if (fotosDaPagina.length > 0) {
      paginas.push({
        numeroPagina: primeiraPaginaFotos + paginaIndex,
        fotos: fotosDaPagina.length,
        inicio: inicioFotos + 1,
        fim: inicioFotos + fotosDaPagina.length
      });
    }
  }
  
  console.log(`   ‚Ä¢ P√°ginas criadas: ${paginas.length}`);
  console.log(`   ‚Ä¢ Numera√ß√£o: ${paginas.map(p => p.numeroPagina).join(', ')}`);
  
  return paginas;
}

// Simular a l√≥gica antiga (com IIFE)
function simularComIIFE() {
  console.log('\nüìÑ SIMULA√á√ÉO COM IIFE (ANTIGA):');
  
  const fotosPorPagina = 4;
  const totalPaginasConteudo = (dados.checklist || dados.descricao) ? 2 : 1;
  const primeiraPaginaFotos = totalPaginasConteudo + 1;
  const totalPaginasFotos = Math.ceil(dados.fotos.length / fotosPorPagina);
  
  console.log(`   ‚Ä¢ P√°ginas de conte√∫do: ${totalPaginasConteudo}`);
  console.log(`   ‚Ä¢ Primeira p√°gina de fotos: ${primeiraPaginaFotos}`);
  console.log(`   ‚Ä¢ Total de p√°ginas de fotos: ${totalPaginasFotos}`);
  
  // Simular o comportamento da IIFE que pode estar causando problemas
  const resultado = (() => {
    const paginas = [];
    
    for (let paginaIndex = 0; paginaIndex < totalPaginasFotos; paginaIndex++) {
      const inicioFotos = paginaIndex * fotosPorPagina;
      const fotosDaPagina = dados.fotos.slice(inicioFotos, inicioFotos + fotosPorPagina);
      
      if (fotosDaPagina.length > 0) {
        paginas.push({
          numeroPagina: primeiraPaginaFotos + paginaIndex,
          fotos: fotosDaPagina.length,
          inicio: inicioFotos + 1,
          fim: inicioFotos + fotosDaPagina.length
        });
      }
    }
    
    return paginas;
  })();
  
  console.log(`   ‚Ä¢ P√°ginas criadas: ${resultado.length}`);
  console.log(`   ‚Ä¢ Numera√ß√£o: ${resultado.map(p => p.numeroPagina).join(', ')}`);
  
  return resultado;
}

// Executar simula√ß√µes
const resultadoSemIIFE = simularSemIIFE();
const resultadoComIIFE = simularComIIFE();

console.log('\nüéØ AN√ÅLISE:');
console.log(`   ‚Ä¢ Sem IIFE: ${resultadoSemIIFE.length} p√°ginas`);
console.log(`   ‚Ä¢ Com IIFE: ${resultadoComIIFE.length} p√°ginas`);

console.log('\nüìù CONCLUS√ÉO:');
console.log('   ‚Ä¢ A l√≥gica matem√°tica √© id√™ntica em ambos os casos');
console.log('   ‚Ä¢ O problema pode estar na interpreta√ß√£o do React-PDF da IIFE');
console.log('   ‚Ä¢ A IIFE pode estar criando um contexto extra que o React-PDF interpreta como conte√∫do');
console.log('   ‚Ä¢ A solu√ß√£o √© remover a IIFE e usar renderiza√ß√£o direta');
